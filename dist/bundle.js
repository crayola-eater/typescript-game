(()=>{"use strict";class t{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i}collidesWith(t){return this.topLeft.x<t.bottomRight.x&&this.bottomRight.x>t.topLeft.x&&this.topLeft.y<t.bottomRight.y&&this.bottomRight.y>t.topRight.y}collidesWithAny(...t){return t.some((t=>this.collidesWith(t)))}extendsBeyond(t){return this.topLeft.x<t.topLeft.x||this.bottomRight.x>t.bottomRight.x||this.topLeft.y<t.topLeft.y||this.bottomRight.y>t.bottomRight.y}getAllCollisionsWith(...t){return t.filter((t=>this.collidesWith(t)))}get topLeft(){return{x:this.x,y:this.y}}get topRight(){return{x:this.x+this.width,y:this.y}}get bottomLeft(){return{x:this.x,y:this.y+this.height}}get bottomRight(){return{x:this.x+this.width,y:this.y+this.height}}get center(){return{x:this.x+this.width/2,y:this.y+this.height/2}}}class e extends t{constructor(t,e,s,i,h=0,o=0,n=5){super(t,e,s,i),this.deltaX=h,this.deltaY=o,this.movementAmount=n}moveBy(t,e){this.x+=t,this.y+=e}move(){this.x+=this.deltaX,this.y+=this.deltaY}moveBack(){this.moveBy(-this.deltaX,-this.deltaY)}}class s extends e{constructor(t,e,s,i,h,o=100,n=100,r=0,a=0){super(e,s,o,n,r,a),this.details=t,this.health=i,this.shooter=h}shoot(t){this.shooter.shoot({x:this.center.x,y:this.center.y},{x:t.x,y:t.y})}draw(t){t.fillStyle=this.details.colour,t.fillRect(this.x,this.y,this.width,this.height),t.fillStyle=this.health.currentColour,t.fillRect(this.x,this.y-40,this.health.currentPercentage*this.width,20),t.strokeStyle="black",t.lineWidth=2,t.strokeRect(this.x,this.y-40,this.width,20),t.fillStyle="black",t.fillText(this.details.name,this.x,this.y-50)}}var i,h=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class o extends s{constructor(t,e,s,h,o,n=100,r=100){super(t,e,s,h,o,n,r),this.details=t,this.health=h,this.shooter=o,i.set(this,void 0);const a=(new Date).getTime();!function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,i,{changedDeltaX:a,changedDeltaY:a,shot:a})}get shouldChangeDirection(){return(new Date).getTime()>h(this,i).changedDeltaX+100}get shouldShoot(){return(new Date).getTime()>h(this,i).shot+500}maybeChangeDirection(){if(this.shouldChangeDirection){const t=Math.random()<.5?-1:1;this.deltaX=5*Math.random()*t;const e=Math.random()<.5?-1:1;this.deltaY=5*Math.random()*e;const s=(new Date).getTime();h(this,i).changedDeltaX=s,h(this,i).changedDeltaY=s}}move(){this.maybeChangeDirection(),super.move()}shoot(t){this.shouldShoot&&(h(this,i).shot=(new Date).getTime(),super.shoot(t))}}i=new WeakMap;class n extends t{constructor(t,e,s,i,h){super(t,e,s,i),this.health=h}draw(t){t.fillStyle="#704300",t.fillRect(this.x,this.y,this.width,this.height),t.fillStyle=this.health.currentColour,t.fillRect(this.x,this.y-40,this.health.currentPercentage*this.width,20),t.strokeStyle="black",t.lineWidth=2,t.strokeRect(this.x,this.y-40,this.width,20)}}class r{constructor(t,e=t){this.maxHealth=t,this.currentHealth=e}changeHealthBy(t){this.currentHealth=Math.max(0,this.currentHealth+t)}get isEmpty(){return 0===this.currentHealth}get currentPercentage(){return this.currentHealth/this.maxHealth}get currentColour(){return this.currentPercentage>.6?"green":this.currentPercentage>.4?"yellow":"red"}}class a extends e{constructor(t,e,s=5,i=5,h=15,o=10){super(t.x,t.y,s,i,0,0),this.speed=h,this.damage=o;const n={deltaX:e.x-t.x,deltaY:e.y-t.y},r=Math.atan2(n.deltaY,n.deltaX);this.deltaX=Math.cos(r)*h,this.deltaY=Math.sin(r)*h}draw(t){t.fillStyle="goldenrod",t.fillRect(this.x,this.y,7,7)}}class l{constructor(){this.shotsFired=[]}shoot(t,e){const s=new a(t,e);this.shotsFired.push(s)}remove(t){this.shotsFired=this.shotsFired.filter((e=>e!==t))}removeShots(...t){this.shotsFired=this.shotsFired.filter((e=>!t.includes(e)))}keepShotsWhere(t){this.shotsFired=this.shotsFired.filter(t)}}var c,d=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},u=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};c=new WeakMap;const y=new o({name:"big_guy1954 (🖥️)",colour:"purple"},300,300,new r(400),new l),p=new o({name:"strangeOne45 (🖥️)",colour:"red"},300,50,new r(50),new l,20,20),m=new o({name:"0101010101 (🖥️)",colour:"navy"},400,200,new r(100),new l),w={players:[new class extends s{constructor(t,e,s,i,h,o,n=100,r=100,a=0,l=0){super(t,e,s,i,o,n,r,a,l),this.details=t,this.health=i,this.controls=h,this.shooter=o,this.controls.onInputHandler=(t,e,s)=>{"LMB"===t&&e&&super.shoot({x:s.offsetX,y:s.offsetY})},this.movementAmount=5}move(){this.controls.inputs.KeyW?this.deltaY=-this.movementAmount:this.controls.inputs.KeyS?this.deltaY=this.movementAmount:this.deltaY=0,this.controls.inputs.KeyA?this.deltaX=-this.movementAmount:this.controls.inputs.KeyD?this.deltaX=this.movementAmount:this.deltaX=0,super.move()}}({name:"You (🎮)",colour:"olive"},0,400,new r(200),new class{constructor(t,e){c.set(this,void 0),this.inputs={KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,LMB:!1},d(this,c,((t,e)=>console.log({input:t,newValue:e})));const s=t=>{0===t.button&&(this.inputs.LMB="mousedown"===t.type,u(this,c).call(this,"LMB",this.inputs.LMB,t))},i=t=>{const{code:e}=t;this.inputs.hasOwnProperty(e)&&(this.inputs[e]="keydown"===t.type,u(this,c).call(this,e,this.inputs[e],t))};t.addEventListener("mouseup",s),t.addEventListener("mousedown",s),e.addEventListener("keyup",i),e.addEventListener("keydown",i)}set onInputHandler(t){d(this,c,t)}}(document.querySelector("canvas"),window),new l),y,p,m],obstacles:[new n(200,200,50,50,new r(300)),new n(100,300,20,150,new r(300)),new n(600,400,90,70,new r(300))],world:new class extends t{constructor(t,e){super(0,0,t,e)}draw(){}}(700,500)};var g,f=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};g=new WeakMap;const{world:x,players:v,obstacles:b}=w,W=document.querySelector("canvas");new class{constructor(t,e,s,i){this.world=t,this.players=e,this.obstacles=s,this.canvas=i,g.set(this,void 0),this.canvas.height=this.world.height,this.canvas.width=this.world.width,function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,g,this.canvas.getContext("2d"))}get computerPlayers(){return this.players.filter((t=>t instanceof o))}otherPlayers(t){return this.players.filter((e=>e!==t))}updatePositions(){for(const t of this.computerPlayers){const e=this.players.find((e=>e!==t));t.shoot({x:e.center.x,y:e.center.y})}this.players=this.players.filter((t=>!t.health.isEmpty));for(const t of this.players){t.move(),(t.extendsBeyond(this.world)||t.collidesWithAny(...this.otherPlayers(t))||t.collidesWithAny(...this.obstacles))&&t.moveBack();for(const e of t.shooter.shotsFired)e.move();this.processCollisions()}}processCollisions(){for(const t of this.players)t.shooter.keepShotsWhere((e=>{const s=e.getAllCollisionsWith(...this.obstacles);s.forEach((t=>t.health.changeHealthBy(-e.damage)));const i=e.getAllCollisionsWith(...this.otherPlayers(t));return i.forEach((t=>t.health.changeHealthBy(-e.damage))),0===s.length&&0===i.length&&!e.extendsBeyond(this.world)}));this.obstacles=this.obstacles.filter((t=>!t.health.isEmpty))}draw(){f(this,g).clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.players){t.draw(f(this,g));for(const e of t.shooter.shotsFired)e.draw(f(this,g));for(const t of this.obstacles)t.draw(f(this,g))}}getWinnerOrNull(){const t=this.players.filter((t=>!t.health.isEmpty));return 1===t.length?t[0]:null}play(){this.updatePositions(),this.draw();const t=this.getWinnerOrNull();t?setTimeout((()=>alert(t.details.name+" won!")),10):requestAnimationFrame(this.play.bind(this))}}(x,v,b,W).play()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,