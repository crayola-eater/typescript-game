(()=>{"use strict";class t{constructor(t,e=t){this.maxHealth=t,this.currentHealth=e}changeHealthBy(t){this.currentHealth=Math.max(0,this.currentHealth+t)}get isEmpty(){return 0===this.currentHealth}get currentPercentage(){return this.currentHealth/this.maxHealth}get currentColour(){return this.currentPercentage>.6?"green":this.currentPercentage>.4?"yellow":"red"}}class e{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i}collidesWith(t){return this.topLeft.x<t.bottomRight.x&&this.bottomRight.x>t.topLeft.x&&this.topLeft.y<t.bottomRight.y&&this.bottomRight.y>t.topRight.y}collidesWithAny(...t){return t.some((t=>this.collidesWith(t)))}extendsBeyond(t){return this.topLeft.x<t.topLeft.x||this.bottomRight.x>t.bottomRight.x||this.topLeft.y<t.topLeft.y||this.bottomRight.y>t.bottomRight.y}getAllCollisionsWith(...t){return t.filter((t=>this.collidesWith(t)))}get topLeft(){return{x:this.x,y:this.y}}get topRight(){return{x:this.x+this.width,y:this.y}}get bottomLeft(){return{x:this.x,y:this.y+this.height}}get bottomRight(){return{x:this.x+this.width,y:this.y+this.height}}get center(){return{x:this.x+this.width/2,y:this.y+this.height/2}}}class s extends e{constructor(t,e,s,i,h=0,o=0,n=5){super(t,e,s,i),this.deltaX=h,this.deltaY=o,this.movementAmount=n}moveBy(t,e){this.x+=t,this.y+=e}move(){this.x+=this.deltaX,this.y+=this.deltaY}moveBack(){this.moveBy(-this.deltaX,-this.deltaY)}}class i extends s{constructor(t,e,s=5,i=5,h=15,o=10){super(t.x,t.y,s,i,0,0),this.speed=h,this.damage=o;const n={deltaX:e.x-t.x,deltaY:e.y-t.y},r=Math.atan2(n.deltaY,n.deltaX);this.deltaX=Math.cos(r)*h,this.deltaY=Math.sin(r)*h}}class h{constructor(){this.shotsFired=[]}shoot(t,e){const s=new i(t,e);this.shotsFired.push(s)}remove(t){this.shotsFired=this.shotsFired.filter((e=>t!==e))}}var o,n=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class r extends s{constructor(t,e,s,i,h=100,n=100){super(t,e,h,n),this.health=s,this.shooter=i,o.set(this,void 0);const r=(new Date).getTime();!function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,o,{changedDeltaX:r,changedDeltaY:r,shot:r})}get shouldChangeDirection(){return(new Date).getTime()>n(this,o).changedDeltaX+100}get shouldShoot(){return(new Date).getTime()>n(this,o).shot+2e3}maybeChangeDirection(){if(this.shouldChangeDirection){const t=Math.random()<.5?-1:1;this.deltaX=5*Math.random()*t;const e=Math.random()<.5?-1:1;this.deltaY=5*Math.random()*e;const s=(new Date).getTime();n(this,o).changedDeltaX=s,n(this,o).changedDeltaY=s}}move(){this.maybeChangeDirection(),super.move()}shoot(t){this.shouldShoot&&this.shooter.shoot({x:this.center.x,y:this.center.y},{x:t.x,y:t.y})}}o=new WeakMap;const a=function(){const e=new t(100),s=new h;return new r(600,200,e,s)}();var l,c=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},d=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class u{constructor(t,e){l.set(this,void 0),this.inputs={KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,LMB:!1},c(this,l,((t,e)=>console.log({input:t,newValue:e})));const s=t=>{0===t.button&&(this.inputs.LMB="mousedown"===t.type,d(this,l).call(this,"LMB",this.inputs.LMB,t))},i=t=>{const{code:e}=t;this.inputs.hasOwnProperty(e)&&(this.inputs[e]="keydown"===t.type,d(this,l).call(this,e,this.inputs[e],t))};t.addEventListener("mouseup",s),t.addEventListener("mousedown",s),e.addEventListener("keyup",i),e.addEventListener("keydown",i)}set onInputHandler(t){c(this,l,t)}}l=new WeakMap;class y extends s{constructor(t,e,s,i,h,o=100,n=100,r=0,a=0){super(t,e,o,n,r,a),this.health=s,this.controls=i,this.shooter=h,this.controls.onInputHandler=(t,e,s)=>{"LMB"===t&&e&&this.shooter.shoot({x:this.center.x,y:this.center.y},{x:s.x,y:s.y})},this.movementAmount=5}move(){this.controls.inputs.KeyW?this.deltaY=-this.movementAmount:this.controls.inputs.KeyS?this.deltaY=this.movementAmount:this.deltaY=0,this.controls.inputs.KeyA?this.deltaX=-this.movementAmount:this.controls.inputs.KeyD?this.deltaX=this.movementAmount:this.deltaX=0,super.move()}}const m=function(){const e=new t(100),s=new u(document.querySelector("canvas"),window),i=new h;return new y(300,100,e,s,i)}();class p extends e{constructor(t,e,s,i,h){super(t,e,s,i),this.health=h}}const g={players:[m,a],obstacles:[new p(200,200,50,50,new t(200)),new p(300,300,20,150,new t(200)),new p(600,400,90,70,new t(200))],world:new class extends e{constructor(t=800,e=500){super(0,0,t,e)}}};var w,f,x=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},v=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};w=new WeakMap,f=new WeakMap;const{world:b,players:R,obstacles:L}=g,M=document.querySelector("canvas");new class{constructor(t,e,s,i){this.world=t,this.players=e,this.obstacles=s,this.canvas=i,w.set(this,void 0),f.set(this,void 0),this.canvas.height=this.world.height,this.canvas.width=this.world.width,x(this,w,this.canvas.getContext("2d")),x(this,f,!1)}otherPlayers(t){return this.players.filter((e=>e!==t))}play(){v(this,w).clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.players){t.move(),(t.extendsBeyond(this.world)||t.collidesWithAny(...this.otherPlayers(t))||t.collidesWithAny(...this.obstacles))&&t.moveBack(),v(this,w).fillStyle="red",v(this,w).fillRect(t.x,t.y,t.width,t.height),v(this,w).fillStyle=t.health.currentColour,v(this,w).fillRect(t.x,t.y-40,t.health.currentPercentage*t.width,20),v(this,w).strokeStyle="black",v(this,w).lineWidth=2,v(this,w).strokeRect(t.x,t.y-40,t.width,20);for(const e of t.shooter.shotsFired){if(e.move(),e.extendsBeyond(this.world)){t.shooter.remove(e);continue}const s=e.getAllCollisionsWith(...this.obstacles);s.forEach((t=>t.health.changeHealthBy(-e.damage)));const i=e.getAllCollisionsWith(...this.otherPlayers(t));for(const t of i)if(t.health.changeHealthBy(-e.damage),t.health.isEmpty)return x(this,f,!1),alert(t+" lost!");s.length>0||i.length>0?t.shooter.remove(e):(v(this,w).fillStyle="goldenrod",v(this,w).fillRect(e.x,e.y,7,7))}for(const t of this.obstacles)v(this,w).fillStyle="#704300",v(this,w).fillRect(t.x,t.y,t.width,t.height),v(this,w).fillStyle=t.health.currentColour,v(this,w).fillRect(t.x,t.y-40,t.health.currentPercentage*t.width,20),v(this,w).strokeStyle="black",v(this,w).lineWidth=2,v(this,w).strokeRect(t.x,t.y-40,t.width,20)}requestAnimationFrame(this.play.bind(this))}}(b,R,L,M).play()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,