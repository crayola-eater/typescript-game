(()=>{"use strict";class t{constructor(t,e=t){this.maxHealth=t,this.currentHealth=e}changeHealthBy(t){this.currentHealth+=t}get isDead(){return 0===this.currentHealth}get currentHealthAsPercentage(){return this.currentHealth/this.maxHealth}}class e{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i}collidesWith(t){return this.topLeft.x<t.bottomRight.x&&this.bottomRight.x>t.topLeft.x&&this.topLeft.y<t.bottomRight.y&&this.bottomRight.y>t.topRight.y}extendsBeyond(t){return this.topLeft.x<t.topLeft.x||this.bottomRight.x>t.bottomRight.x||this.topLeft.y<t.topLeft.y||this.bottomRight.y>t.bottomRight.y}get topLeft(){return{x:this.x,y:this.y}}get topRight(){return{x:this.x+this.width,y:this.y}}get bottomLeft(){return{x:this.x,y:this.y+this.height}}get bottomRight(){return{x:this.x+this.width,y:this.y+this.height}}get center(){return{x:this.x+this.width/2,y:this.y+this.height/2}}}var s,i,n=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s};class h extends e{constructor(t,e,h,o,r=0,a=0){super(t,e,h,o),this._deltaX=r,this._deltaY=a,s.set(this,void 0),i.set(this,void 0),n(this,s,0),n(this,i,0)}get deltaX(){return this._deltaX}set deltaX(t){var e;e=this,[{set value(t){n(e,s,t)}}.value,this._deltaX]=[this._deltaX,t]}get deltaY(){return this._deltaY}set deltaY(t){var e;e=this,[{set value(t){n(e,i,t)}}.value,this._deltaY]=[this._deltaY,t]}moveBy(t,e){this.x+=t,this.y+=e}move(){this.x+=this.deltaX,this.y+=this.deltaY}undoMove(){this.moveBy(-this.deltaX,-this.deltaY)}}s=new WeakMap,i=new WeakMap;class o extends h{constructor(t,e,s=5,i=5,n=15,h=10){super(t.x,t.y,s,i,0,0),this.speed=n,this.damage=h;const o={deltaX:e.x-t.x,deltaY:e.y-t.y},r=Math.atan2(o.deltaY,o.deltaX);this.deltaX=Math.cos(r)*n,this.deltaY=Math.sin(r)*n}}class r{constructor(){this.shotsFired=[]}shoot(t,e){const s=new o(t,e);this.shotsFired.push(s)}remove(t){this.shotsFired=this.shotsFired.filter((e=>t!==e))}}var a,l=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class c extends h{constructor(t,e,s,i,n=100,h=100){super(t,e,n,h),this.health=s,this.shooter=i,a.set(this,void 0);const o=(new Date).getTime();!function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,a,{changedDeltaX:o,changedDeltaY:o,shot:o})}get shouldChangeDirection(){return(new Date).getTime()>l(this,a).changedDeltaX+100}maybeChangeDirection(){if(this.shouldChangeDirection){const t=Math.random()<.5?-1:1;this.deltaX=5*Math.random()*t;const e=Math.random()<.5?-1:1;this.deltaY=5*Math.random()*e;const s=(new Date).getTime();l(this,a).changedDeltaX=s,l(this,a).changedDeltaY=s}}move(){this.maybeChangeDirection(),super.move()}}a=new WeakMap;const d=function(){const e=new t(100),s=new r;return new c(600,200,e,s)}();var u,y=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},p=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class w{constructor(t,e){u.set(this,void 0),this.inputs={KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,LMB:!1},y(this,u,((t,e)=>console.log({input:t,newValue:e})));const s=t=>{this.inputs.LMB="mousedown"===t.type,p(this,u).call(this,"LMB",this.inputs.LMB,t)},i=t=>{const{code:e}=t;this.inputs.hasOwnProperty(e)&&(this.inputs[e]="keydown"===t.type,p(this,u).call(this,e,this.inputs[e],t))};t.addEventListener("mouseup",s),t.addEventListener("mousedown",s),e.addEventListener("keyup",i),e.addEventListener("keydown",i)}set onInputHandler(t){y(this,u,t)}}u=new WeakMap;var g,f=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class m extends h{constructor(t,e,s,i,n,h=100,o=100,r=0,a=0){super(t,e,h,o,r,a),this.health=s,this.controls=i,this.shooter=n,g.set(this,void 0),this.controls.onInputHandler=(t,e,s)=>{"LMB"===t&&e&&this.shooter.shoot({x:this.center.x,y:this.center.y},{x:s.x,y:s.y})},function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,g,5)}move(){this.controls.inputs.KeyW?this.deltaY=-f(this,g):this.controls.inputs.KeyS?this.deltaY=f(this,g):this.deltaY=0,this.controls.inputs.KeyA?this.deltaX=-f(this,g):this.controls.inputs.KeyD?this.deltaX=f(this,g):this.deltaX=0,super.move()}}g=new WeakMap;const v=function(){const e=new t(100),s=new w(document.querySelector("canvas"),window),i=new r;return new m(300,100,e,s,i)}();class x extends e{constructor(t,e,s,i,n){super(t,e,s,i),this.health=n}}const b={players:[v,d],obstacles:[new x(200,200,50,50,new t(200)),new x(300,300,20,150,new t(200)),new x(600,400,90,70,new t(200))],world:new class extends e{constructor(t=800,e=500){super(0,0,t,e)}}};Object.assign({},b);const{world:M,players:R,obstacles:L}=b,X=document.querySelector("canvas"),Y=X.getContext("2d");X.height=M.height,X.width=M.width;const D=()=>{return t=void 0,e=void 0,i=function*(){Y.clearRect(0,0,X.width,X.height);for(const t of L){Y.fillStyle="#704300",Y.fillRect(t.x,t.y,t.width,t.height);const{currentHealth:e}=t.health;Y.fillStyle=e>60?"green":e>40?"yellow":"red",Y.fillRect(t.x,t.y-40,t.health.currentHealthAsPercentage*t.width,20),Y.strokeStyle="black",Y.lineWidth=2,Y.strokeRect(t.x,t.y-40,t.width,20)}for(const t of R){t.move(),L.some((e=>{if(e.collidesWith(t))return console.log("Collision between player and obstacle."),!0}))&&t.undoMove();const{currentHealth:e}=t.health;Y.fillStyle="red",Y.fillRect(t.x,t.y,t.width,t.height),Y.fillStyle=e>60?"green":e>40?"yellow":"red",Y.fillRect(t.x,t.y-40,t.health.currentHealthAsPercentage*t.width,20),Y.strokeStyle="black",Y.lineWidth=2,Y.strokeRect(t.x,t.y-40,t.width,20);for(const e of t.shooter.shotsFired)e.move(),Y.fillStyle="goldenrod",Y.fillRect(e.x,e.y,7,7)}requestAnimationFrame(D)},new((s=void 0)||(s=Promise))((function(n,h){function o(t){try{a(i.next(t))}catch(t){h(t)}}function r(t){try{a(i.throw(t))}catch(t){h(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(o,r)}a((i=i.apply(t,e||[])).next())}));var t,e,s,i};D()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,