(()=>{"use strict";class t{constructor(t,e=t){this.maxHealth=t,this.currentHealth=e}changeHealthBy(t){this.currentHealth=Math.max(0,this.currentHealth+t)}get isEmpty(){return 0===this.currentHealth}get currentPercentage(){return this.currentHealth/this.maxHealth}get currentColour(){return this.currentPercentage>.6?"green":this.currentPercentage>.4?"yellow":"red"}}class e{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i}collidesWith(t){return this.topLeft.x<t.bottomRight.x&&this.bottomRight.x>t.topLeft.x&&this.topLeft.y<t.bottomRight.y&&this.bottomRight.y>t.topRight.y}collidesWithAny(...t){return t.some((t=>this.collidesWith(t)))}extendsBeyond(t){return this.topLeft.x<t.topLeft.x||this.bottomRight.x>t.bottomRight.x||this.topLeft.y<t.topLeft.y||this.bottomRight.y>t.bottomRight.y}getAllCollisionsWith(...t){return t.filter((t=>this.collidesWith(t)))}get topLeft(){return{x:this.x,y:this.y}}get topRight(){return{x:this.x+this.width,y:this.y}}get bottomLeft(){return{x:this.x,y:this.y+this.height}}get bottomRight(){return{x:this.x+this.width,y:this.y+this.height}}get center(){return{x:this.x+this.width/2,y:this.y+this.height/2}}}class s extends e{constructor(t,e,s,i,h=0,o=0,n=5){super(t,e,s,i),this.deltaX=h,this.deltaY=o,this.movementAmount=n}moveBy(t,e){this.x+=t,this.y+=e}move(){this.x+=this.deltaX,this.y+=this.deltaY}moveBack(){this.moveBy(-this.deltaX,-this.deltaY)}}class i extends s{constructor(t,e,s,i,h=100,o=100,n=0,r=0){super(t,e,h,o,n,r),this.health=s,this.shooter=i}shoot(t){this.shooter.shoot({x:this.center.x,y:this.center.y},{x:t.x,y:t.y})}draw(t){t.fillStyle="red",t.fillRect(this.x,this.y,this.width,this.height),t.fillStyle=this.health.currentColour,t.fillRect(this.x,this.y-40,this.health.currentPercentage*this.width,20),t.strokeStyle="black",t.lineWidth=2,t.strokeRect(this.x,this.y-40,this.width,20)}}class h extends s{constructor(t,e,s=5,i=5,h=15,o=10){super(t.x,t.y,s,i,0,0),this.speed=h,this.damage=o;const n={deltaX:e.x-t.x,deltaY:e.y-t.y},r=Math.atan2(n.deltaY,n.deltaX);this.deltaX=Math.cos(r)*h,this.deltaY=Math.sin(r)*h}draw(t){t.fillStyle="goldenrod",t.fillRect(this.x,this.y,7,7)}}class o{constructor(){this.shotsFired=[]}shoot(t,e){const s=new h(t,e);this.shotsFired.push(s)}remove(t){this.shotsFired=this.shotsFired.filter((e=>e!==t))}removeShots(...t){this.shotsFired=this.shotsFired.filter((e=>!t.includes(e)))}keepShotsWhere(t){this.shotsFired=this.shotsFired.filter(t)}}var n,r=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class a extends i{constructor(t,e,s,i,h=100,o=100){super(t,e,s,i,h,o),this.health=s,this.shooter=i,n.set(this,void 0);const r=(new Date).getTime();!function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,n,{changedDeltaX:r,changedDeltaY:r,shot:r})}get shouldChangeDirection(){return(new Date).getTime()>r(this,n).changedDeltaX+100}get shouldShoot(){return(new Date).getTime()>r(this,n).shot+2e3}maybeChangeDirection(){if(this.shouldChangeDirection){const t=Math.random()<.5?-1:1;this.deltaX=5*Math.random()*t;const e=Math.random()<.5?-1:1;this.deltaY=5*Math.random()*e;const s=(new Date).getTime();r(this,n).changedDeltaX=s,r(this,n).changedDeltaY=s}}move(){this.maybeChangeDirection(),super.move()}shoot(t){this.shouldShoot&&super.shoot(t)}}n=new WeakMap;const l=function(){const e=new t(100),s=new o;return new a(600,200,e,s)}();var c,d=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},u=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class y{constructor(t,e){c.set(this,void 0),this.inputs={KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,LMB:!1},d(this,c,((t,e)=>console.log({input:t,newValue:e})));const s=t=>{0===t.button&&(this.inputs.LMB="mousedown"===t.type,u(this,c).call(this,"LMB",this.inputs.LMB,t))},i=t=>{const{code:e}=t;this.inputs.hasOwnProperty(e)&&(this.inputs[e]="keydown"===t.type,u(this,c).call(this,e,this.inputs[e],t))};t.addEventListener("mouseup",s),t.addEventListener("mousedown",s),e.addEventListener("keyup",i),e.addEventListener("keydown",i)}set onInputHandler(t){d(this,c,t)}}c=new WeakMap;class p extends i{constructor(t,e,s,i,h,o=100,n=100,r=0,a=0){super(t,e,s,h,o,n,r,a),this.health=s,this.controls=i,this.shooter=h,this.controls.onInputHandler=(t,e,s)=>{"LMB"===t&&e&&super.shoot({x:s.x,y:s.y})},this.movementAmount=5}move(){this.controls.inputs.KeyW?this.deltaY=-this.movementAmount:this.controls.inputs.KeyS?this.deltaY=this.movementAmount:this.deltaY=0,this.controls.inputs.KeyA?this.deltaX=-this.movementAmount:this.controls.inputs.KeyD?this.deltaX=this.movementAmount:this.deltaX=0,super.move()}}const w=function(){const e=new t(100),s=new y(document.querySelector("canvas"),window),i=new o;return new p(300,100,e,s,i)}();class m extends e{constructor(t,e,s,i,h){super(t,e,s,i),this.health=h}draw(t){t.fillStyle="#704300",t.fillRect(this.x,this.y,this.width,this.height),t.fillStyle=this.health.currentColour,t.fillRect(this.x,this.y-40,this.health.currentPercentage*this.width,20),t.strokeStyle="black",t.lineWidth=2,t.strokeRect(this.x,this.y-40,this.width,20)}}const g={players:[w,l],obstacles:[new m(200,200,50,50,new t(200)),new m(300,300,20,150,new t(200)),new m(600,400,90,70,new t(200))],world:new class extends e{constructor(t=800,e=500){super(0,0,t,e)}draw(){}}};var f,x,v=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},b=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};f=new WeakMap,x=new WeakMap;const{world:W,players:R,obstacles:L}=g,k=document.querySelector("canvas");new class{constructor(t,e,s,i){this.world=t,this.players=e,this.obstacles=s,this.canvas=i,f.set(this,void 0),x.set(this,void 0),this.canvas.height=this.world.height,this.canvas.width=this.world.width,v(this,f,this.canvas.getContext("2d")),v(this,x,!1)}otherPlayers(t){return this.players.filter((e=>e!==t))}updatePositions(){for(const t of this.players){t.move(),(t.extendsBeyond(this.world)||t.collidesWithAny(...this.otherPlayers(t))||t.collidesWithAny(...this.obstacles))&&t.moveBack();for(const e of t.shooter.shotsFired)e.move();this.processCollisions()}}processCollisions(){for(const t of this.players)t.shooter.keepShotsWhere((e=>{const s=e.getAllCollisionsWith(...this.obstacles);s.forEach((t=>t.health.changeHealthBy(-e.damage)));const i=e.getAllCollisionsWith(...this.otherPlayers(t));return i.forEach((t=>t.health.changeHealthBy(-e.damage))),0===s.length&&0===i.length&&!e.extendsBeyond(this.world)}))}draw(){b(this,f).clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.players){t.draw(b(this,f));for(const e of t.shooter.shotsFired)e.draw(b(this,f));for(const t of this.obstacles)t.draw(b(this,f))}}getWinner(){const t=this.players.filter((t=>!t.health.isEmpty));if(1===t.length)return t[0]}play(){this.updatePositions(),this.draw();const t=this.getWinner();if(t)return setTimeout((()=>alert(t+" has won!")),10);requestAnimationFrame(this.play.bind(this))}}(W,R,L,k).play()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,