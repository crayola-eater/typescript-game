(()=>{"use strict";class t{constructor(t,e=t){this.maxHealth=t,this.currentHealth=e}changeHealthBy(t){this.currentHealth+=t}get isDead(){return 0===this.currentHealth}get currentHealthAsPercentage(){return this.currentHealth/this.maxHealth}}class e{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i}collidesWith(t){return this.topLeft.x<t.bottomRight.x&&this.bottomRight.x>t.topLeft.x&&this.topLeft.y<t.bottomRight.y&&this.bottomRight.y>t.topRight.y}collidesWithAny(...t){return t.some((t=>this.collidesWith(t)))}extendsBeyond(t){return this.topLeft.x<t.topLeft.x||this.bottomRight.x>t.bottomRight.x||this.topLeft.y<t.topLeft.y||this.bottomRight.y>t.bottomRight.y}get topLeft(){return{x:this.x,y:this.y}}get topRight(){return{x:this.x+this.width,y:this.y}}get bottomLeft(){return{x:this.x,y:this.y+this.height}}get bottomRight(){return{x:this.x+this.width,y:this.y+this.height}}get center(){return{x:this.x+this.width/2,y:this.y+this.height/2}}}class s extends e{constructor(t,e,s,i,n=0,o=0,h=5){super(t,e,s,i),this.deltaX=n,this.deltaY=o,this.movementAmount=h}moveBy(t,e){this.x+=t,this.y+=e}move(){this.x+=this.deltaX,this.y+=this.deltaY}moveBack(){this.moveBy(-this.deltaX,-this.deltaY)}}class i extends s{constructor(t,e,s=5,i=5,n=15,o=10){super(t.x,t.y,s,i,0,0),this.speed=n,this.damage=o;const h={deltaX:e.x-t.x,deltaY:e.y-t.y},r=Math.atan2(h.deltaY,h.deltaX);this.deltaX=Math.cos(r)*n,this.deltaY=Math.sin(r)*n}}class n{constructor(){this.shotsFired=[]}shoot(t,e){const s=new i(t,e);this.shotsFired.push(s)}remove(t){this.shotsFired=this.shotsFired.filter((e=>t!==e))}}var o,h=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class r extends s{constructor(t,e,s,i,n=100,h=100){super(t,e,n,h),this.health=s,this.shooter=i,o.set(this,void 0);const r=(new Date).getTime();!function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");e.set(t,s)}(this,o,{changedDeltaX:r,changedDeltaY:r,shot:r})}get shouldChangeDirection(){return(new Date).getTime()>h(this,o).changedDeltaX+100}maybeChangeDirection(){if(this.shouldChangeDirection){const t=Math.random()<.5?-1:1;this.deltaX=5*Math.random()*t;const e=Math.random()<.5?-1:1;this.deltaY=5*Math.random()*e;const s=(new Date).getTime();h(this,o).changedDeltaX=s,h(this,o).changedDeltaY=s}}move(){this.maybeChangeDirection(),super.move()}}o=new WeakMap;const a=function(){const e=new t(100),s=new n;return new r(600,200,e,s)}();var l,c=function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s},d=function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};class u{constructor(t,e){l.set(this,void 0),this.inputs={KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,LMB:!1},c(this,l,((t,e)=>console.log({input:t,newValue:e})));const s=t=>{0===t.button&&(this.inputs.LMB="mousedown"===t.type,d(this,l).call(this,"LMB",this.inputs.LMB,t))},i=t=>{const{code:e}=t;this.inputs.hasOwnProperty(e)&&(this.inputs[e]="keydown"===t.type,d(this,l).call(this,e,this.inputs[e],t))};t.addEventListener("mouseup",s),t.addEventListener("mousedown",s),e.addEventListener("keyup",i),e.addEventListener("keydown",i)}set onInputHandler(t){c(this,l,t)}}l=new WeakMap;class y extends s{constructor(t,e,s,i,n,o=100,h=100,r=0,a=0){super(t,e,o,h,r,a),this.health=s,this.controls=i,this.shooter=n,this.controls.onInputHandler=(t,e,s)=>{"LMB"===t&&e&&this.shooter.shoot({x:this.center.x,y:this.center.y},{x:s.x,y:s.y})},this.movementAmount=5}move(){this.controls.inputs.KeyW?this.deltaY=-this.movementAmount:this.controls.inputs.KeyS?this.deltaY=this.movementAmount:this.deltaY=0,this.controls.inputs.KeyA?this.deltaX=-this.movementAmount:this.controls.inputs.KeyD?this.deltaX=this.movementAmount:this.deltaX=0,super.move()}}const m=function(){const e=new t(100),s=new u(document.querySelector("canvas"),window),i=new n;return new y(300,100,e,s,i)}();class p extends e{constructor(t,e,s,i,n){super(t,e,s,i),this.health=n}}const w={players:[m,a],obstacles:[new p(200,200,50,50,new t(200)),new p(300,300,20,150,new t(200)),new p(600,400,90,70,new t(200))],world:new class extends e{constructor(t=800,e=500){super(0,0,t,e)}}};Object.assign({},w);const{world:g,players:f,obstacles:x}=w,v=document.querySelector("canvas"),R=v.getContext("2d");v.height=g.height,v.width=g.width;const b=()=>{return t=void 0,e=void 0,i=function*(){R.clearRect(0,0,v.width,v.height);for(const t of x){R.fillStyle="#704300",R.fillRect(t.x,t.y,t.width,t.height);const{currentHealth:e}=t.health;R.fillStyle=e>60?"green":e>40?"yellow":"red",R.fillRect(t.x,t.y-40,t.health.currentHealthAsPercentage*t.width,20),R.strokeStyle="black",R.lineWidth=2,R.strokeRect(t.x,t.y-40,t.width,20)}for(const t of f){t.move(),(t.extendsBeyond(g)||t.collidesWithAny(...x))&&t.moveBack();const{currentHealth:e}=t.health;R.fillStyle="red",R.fillRect(t.x,t.y,t.width,t.height),R.fillStyle=e>60?"green":e>40?"yellow":"red",R.fillRect(t.x,t.y-40,t.health.currentHealthAsPercentage*t.width,20),R.strokeStyle="black",R.lineWidth=2,R.strokeRect(t.x,t.y-40,t.width,20);for(const e of t.shooter.shotsFired)e.move(),(e.collidesWithAny(...x)||e.collidesWithAny(...f.filter((e=>e!==t))))&&t.shooter.remove(e),R.fillStyle="goldenrod",R.fillRect(e.x,e.y,7,7)}requestAnimationFrame(b)},new((s=void 0)||(s=Promise))((function(n,o){function h(t){try{a(i.next(t))}catch(t){o(t)}}function r(t){try{a(i.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(h,r)}a((i=i.apply(t,e||[])).next())}));var t,e,s,i};b()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,